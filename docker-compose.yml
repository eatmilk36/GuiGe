services:
  mysqldb:
    image: mysql:5.7
    container_name: mysqldb
    environment:
      MYSQL_ROOT_PASSWORD: jeter
      MYSQL_DATABASE: GuiGeDb
      MYSQL_USER: jeter
      MYSQL_PASSWORD: jeter
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "3306:3306"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  mysql_backup:
    image: alpine:latest
    container_name: mysql_backup
    volumes:
      - C:/backup:/backup
    environment:
      - MYSQL_HOST=mysqldb
      - MYSQL_USER=jeter
      - MYSQL_PASSWORD=jeter
      - MYSQL_DATABASE=GuiGeDb
    networks:
      - app_network
    entrypoint: >
      /bin/sh -c "
      apk add --no-cache mysql-client bash &&
      echo '0 * * * * mysqldump -h $MYSQL_HOST -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE > /backup/backup_$(date +\%Y\%m\%d\%H\%M\%S).sql && find /backup -type f -mtime +1 -exec rm -f {} \;' > /etc/crontabs/root &&
      crond -f
      "
    restart: always

  app:
    container_name: guiGe
    build:
      context: ./backend
    working_dir: /app
    volumes:
      - C:/logs:/var/log/myapp
    ports:
      - "3333:3333"
    environment:
      - ENVIRONMENT=production
      - NODE_ENV=production
      - DB_HOST=mysqldb
      - DB_USER=jeter
      - DB_PASSWORD=jeter
      - DB_NAME=GuiGeDb
      - DB_PORT=3306
      - SECRET_KEY=X5Tn+2cVQz8eY4yH3L98h6UkHY2NCs7OpgkT/P2SHMA=
      - TYPEORM_ENTITIES= "dist/src/entities/*.js"
    networks:
      - app_network
    depends_on:
      mysqldb:
        condition: service_healthy
    restart: always

  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    working_dir: /app
    ports:
      - "80:80"
    networks:
      - app_network
    environment:
      - NODE_ENV=production
    restart: always

  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    ports:
      - "3100:3100"
    user: "root"
    volumes:
      - C:/logs:/var/log/myapp
      - ./loki-config:/etc/loki/
      - C:/loki-data:/var/loki
    command: -config.file=/etc/loki/loki.yaml
    networks:
      - app_network
    restart: always

  promtail:
    image: grafana/promtail:2.9.1
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - ./promtail-config:/etc/promtail/
      - C:/logs:/var/log
    command: -config.file=/etc/promtail/promtail.yaml
    networks:
      - app_network
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_compose
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana.ini:/etc/grafana/grafana.ini
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ROOT_URL=/grafana/
    networks:
      - app_network
    restart: always

  alpine:
    image: nginx:latest
    container_name: alpine_proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "58778:80"
    networks:
      - app_network
    depends_on:
      app:
        condition: service_started
    restart: always

networks:
  app_network:
    driver: bridge
    enable_ipv6: false

volumes:
  grafana-data:
  backup:
